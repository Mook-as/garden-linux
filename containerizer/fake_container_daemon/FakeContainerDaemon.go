// This file was generated by counterfeiter
package fake_container_daemon

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/container_daemon"
	"github.com/cloudfoundry-incubator/garden-linux/containerizer"
)

type FakeContainerDaemon struct {
	RunStub        func(listener container_daemon.Listener) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		listener container_daemon.Listener
	}
	runReturns struct {
		result1 error
	}
}

func (fake *FakeContainerDaemon) Run(listener container_daemon.Listener) error {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		listener container_daemon.Listener
	}{listener})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(listener)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeContainerDaemon) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeContainerDaemon) RunArgsForCall(i int) container_daemon.Listener {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].listener
}

func (fake *FakeContainerDaemon) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

var _ containerizer.ContainerDaemon = new(FakeContainerDaemon)
