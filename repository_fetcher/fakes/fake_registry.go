// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/repository_fetcher"
	"github.com/docker/docker/registry"
)

type FakeRegistry struct {
	GetRepositoryDataStub        func(repoName string) (*registry.RepositoryData, error)
	getRepositoryDataMutex       sync.RWMutex
	getRepositoryDataArgsForCall []struct {
		repoName string
	}
	getRepositoryDataReturns struct {
		result1 *registry.RepositoryData
		result2 error
	}
	GetRemoteTagsStub        func(registries []string, repository string, token []string) (map[string]string, error)
	getRemoteTagsMutex       sync.RWMutex
	getRemoteTagsArgsForCall []struct {
		registries []string
		repository string
		token      []string
	}
	getRemoteTagsReturns struct {
		result1 map[string]string
		result2 error
	}
	GetRemoteHistoryStub        func(imageID string, registry string, token []string) ([]string, error)
	getRemoteHistoryMutex       sync.RWMutex
	getRemoteHistoryArgsForCall []struct {
		imageID  string
		registry string
		token    []string
	}
	getRemoteHistoryReturns struct {
		result1 []string
		result2 error
	}
	GetRemoteImageJSONStub        func(imageID string, registry string, token []string) ([]byte, int, error)
	getRemoteImageJSONMutex       sync.RWMutex
	getRemoteImageJSONArgsForCall []struct {
		imageID  string
		registry string
		token    []string
	}
	getRemoteImageJSONReturns struct {
		result1 []byte
		result2 int
		result3 error
	}
	GetRemoteImageLayerStub        func(imageID string, registry string, token []string, size int64) (io.ReadCloser, error)
	getRemoteImageLayerMutex       sync.RWMutex
	getRemoteImageLayerArgsForCall []struct {
		imageID  string
		registry string
		token    []string
		size     int64
	}
	getRemoteImageLayerReturns struct {
		result1 io.ReadCloser
		result2 error
	}
}

func (fake *FakeRegistry) GetRepositoryData(repoName string) (*registry.RepositoryData, error) {
	fake.getRepositoryDataMutex.Lock()
	fake.getRepositoryDataArgsForCall = append(fake.getRepositoryDataArgsForCall, struct {
		repoName string
	}{repoName})
	fake.getRepositoryDataMutex.Unlock()
	if fake.GetRepositoryDataStub != nil {
		return fake.GetRepositoryDataStub(repoName)
	} else {
		return fake.getRepositoryDataReturns.result1, fake.getRepositoryDataReturns.result2
	}
}

func (fake *FakeRegistry) GetRepositoryDataCallCount() int {
	fake.getRepositoryDataMutex.RLock()
	defer fake.getRepositoryDataMutex.RUnlock()
	return len(fake.getRepositoryDataArgsForCall)
}

func (fake *FakeRegistry) GetRepositoryDataArgsForCall(i int) string {
	fake.getRepositoryDataMutex.RLock()
	defer fake.getRepositoryDataMutex.RUnlock()
	return fake.getRepositoryDataArgsForCall[i].repoName
}

func (fake *FakeRegistry) GetRepositoryDataReturns(result1 *registry.RepositoryData, result2 error) {
	fake.GetRepositoryDataStub = nil
	fake.getRepositoryDataReturns = struct {
		result1 *registry.RepositoryData
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) GetRemoteTags(registries []string, repository string, token []string) (map[string]string, error) {
	fake.getRemoteTagsMutex.Lock()
	fake.getRemoteTagsArgsForCall = append(fake.getRemoteTagsArgsForCall, struct {
		registries []string
		repository string
		token      []string
	}{registries, repository, token})
	fake.getRemoteTagsMutex.Unlock()
	if fake.GetRemoteTagsStub != nil {
		return fake.GetRemoteTagsStub(registries, repository, token)
	} else {
		return fake.getRemoteTagsReturns.result1, fake.getRemoteTagsReturns.result2
	}
}

func (fake *FakeRegistry) GetRemoteTagsCallCount() int {
	fake.getRemoteTagsMutex.RLock()
	defer fake.getRemoteTagsMutex.RUnlock()
	return len(fake.getRemoteTagsArgsForCall)
}

func (fake *FakeRegistry) GetRemoteTagsArgsForCall(i int) ([]string, string, []string) {
	fake.getRemoteTagsMutex.RLock()
	defer fake.getRemoteTagsMutex.RUnlock()
	return fake.getRemoteTagsArgsForCall[i].registries, fake.getRemoteTagsArgsForCall[i].repository, fake.getRemoteTagsArgsForCall[i].token
}

func (fake *FakeRegistry) GetRemoteTagsReturns(result1 map[string]string, result2 error) {
	fake.GetRemoteTagsStub = nil
	fake.getRemoteTagsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) GetRemoteHistory(imageID string, registry string, token []string) ([]string, error) {
	fake.getRemoteHistoryMutex.Lock()
	fake.getRemoteHistoryArgsForCall = append(fake.getRemoteHistoryArgsForCall, struct {
		imageID  string
		registry string
		token    []string
	}{imageID, registry, token})
	fake.getRemoteHistoryMutex.Unlock()
	if fake.GetRemoteHistoryStub != nil {
		return fake.GetRemoteHistoryStub(imageID, registry, token)
	} else {
		return fake.getRemoteHistoryReturns.result1, fake.getRemoteHistoryReturns.result2
	}
}

func (fake *FakeRegistry) GetRemoteHistoryCallCount() int {
	fake.getRemoteHistoryMutex.RLock()
	defer fake.getRemoteHistoryMutex.RUnlock()
	return len(fake.getRemoteHistoryArgsForCall)
}

func (fake *FakeRegistry) GetRemoteHistoryArgsForCall(i int) (string, string, []string) {
	fake.getRemoteHistoryMutex.RLock()
	defer fake.getRemoteHistoryMutex.RUnlock()
	return fake.getRemoteHistoryArgsForCall[i].imageID, fake.getRemoteHistoryArgsForCall[i].registry, fake.getRemoteHistoryArgsForCall[i].token
}

func (fake *FakeRegistry) GetRemoteHistoryReturns(result1 []string, result2 error) {
	fake.GetRemoteHistoryStub = nil
	fake.getRemoteHistoryReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) GetRemoteImageJSON(imageID string, registry string, token []string) ([]byte, int, error) {
	fake.getRemoteImageJSONMutex.Lock()
	fake.getRemoteImageJSONArgsForCall = append(fake.getRemoteImageJSONArgsForCall, struct {
		imageID  string
		registry string
		token    []string
	}{imageID, registry, token})
	fake.getRemoteImageJSONMutex.Unlock()
	if fake.GetRemoteImageJSONStub != nil {
		return fake.GetRemoteImageJSONStub(imageID, registry, token)
	} else {
		return fake.getRemoteImageJSONReturns.result1, fake.getRemoteImageJSONReturns.result2, fake.getRemoteImageJSONReturns.result3
	}
}

func (fake *FakeRegistry) GetRemoteImageJSONCallCount() int {
	fake.getRemoteImageJSONMutex.RLock()
	defer fake.getRemoteImageJSONMutex.RUnlock()
	return len(fake.getRemoteImageJSONArgsForCall)
}

func (fake *FakeRegistry) GetRemoteImageJSONArgsForCall(i int) (string, string, []string) {
	fake.getRemoteImageJSONMutex.RLock()
	defer fake.getRemoteImageJSONMutex.RUnlock()
	return fake.getRemoteImageJSONArgsForCall[i].imageID, fake.getRemoteImageJSONArgsForCall[i].registry, fake.getRemoteImageJSONArgsForCall[i].token
}

func (fake *FakeRegistry) GetRemoteImageJSONReturns(result1 []byte, result2 int, result3 error) {
	fake.GetRemoteImageJSONStub = nil
	fake.getRemoteImageJSONReturns = struct {
		result1 []byte
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRegistry) GetRemoteImageLayer(imageID string, registry string, token []string, size int64) (io.ReadCloser, error) {
	fake.getRemoteImageLayerMutex.Lock()
	fake.getRemoteImageLayerArgsForCall = append(fake.getRemoteImageLayerArgsForCall, struct {
		imageID  string
		registry string
		token    []string
		size     int64
	}{imageID, registry, token, size})
	fake.getRemoteImageLayerMutex.Unlock()
	if fake.GetRemoteImageLayerStub != nil {
		return fake.GetRemoteImageLayerStub(imageID, registry, token, size)
	} else {
		return fake.getRemoteImageLayerReturns.result1, fake.getRemoteImageLayerReturns.result2
	}
}

func (fake *FakeRegistry) GetRemoteImageLayerCallCount() int {
	fake.getRemoteImageLayerMutex.RLock()
	defer fake.getRemoteImageLayerMutex.RUnlock()
	return len(fake.getRemoteImageLayerArgsForCall)
}

func (fake *FakeRegistry) GetRemoteImageLayerArgsForCall(i int) (string, string, []string, int64) {
	fake.getRemoteImageLayerMutex.RLock()
	defer fake.getRemoteImageLayerMutex.RUnlock()
	return fake.getRemoteImageLayerArgsForCall[i].imageID, fake.getRemoteImageLayerArgsForCall[i].registry, fake.getRemoteImageLayerArgsForCall[i].token, fake.getRemoteImageLayerArgsForCall[i].size
}

func (fake *FakeRegistry) GetRemoteImageLayerReturns(result1 io.ReadCloser, result2 error) {
	fake.GetRemoteImageLayerStub = nil
	fake.getRemoteImageLayerReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

var _ repository_fetcher.Registry = new(FakeRegistry)
