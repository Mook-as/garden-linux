// This file was generated by counterfeiter
package fake_remote_image_id_provider

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/layercake"
	"github.com/cloudfoundry-incubator/garden-linux/repository_fetcher"
)

type FakeRemoteImageIDProvider struct {
	ProvideImageIDStub        func(request *repository_fetcher.FetchRequest) (layercake.ID, error)
	provideImageIDMutex       sync.RWMutex
	provideImageIDArgsForCall []struct {
		request *repository_fetcher.FetchRequest
	}
	provideImageIDReturns struct {
		result1 layercake.ID
		result2 error
	}
}

func (fake *FakeRemoteImageIDProvider) ProvideImageID(request *repository_fetcher.FetchRequest) (layercake.ID, error) {
	fake.provideImageIDMutex.Lock()
	fake.provideImageIDArgsForCall = append(fake.provideImageIDArgsForCall, struct {
		request *repository_fetcher.FetchRequest
	}{request})
	fake.provideImageIDMutex.Unlock()
	if fake.ProvideImageIDStub != nil {
		return fake.ProvideImageIDStub(request)
	} else {
		return fake.provideImageIDReturns.result1, fake.provideImageIDReturns.result2
	}
}

func (fake *FakeRemoteImageIDProvider) ProvideImageIDCallCount() int {
	fake.provideImageIDMutex.RLock()
	defer fake.provideImageIDMutex.RUnlock()
	return len(fake.provideImageIDArgsForCall)
}

func (fake *FakeRemoteImageIDProvider) ProvideImageIDArgsForCall(i int) *repository_fetcher.FetchRequest {
	fake.provideImageIDMutex.RLock()
	defer fake.provideImageIDMutex.RUnlock()
	return fake.provideImageIDArgsForCall[i].request
}

func (fake *FakeRemoteImageIDProvider) ProvideImageIDReturns(result1 layercake.ID, result2 error) {
	fake.ProvideImageIDStub = nil
	fake.provideImageIDReturns = struct {
		result1 layercake.ID
		result2 error
	}{result1, result2}
}

var _ repository_fetcher.RemoteImageIDProvider = new(FakeRemoteImageIDProvider)
