// This file was generated by counterfeiter
package fake_fetch_request_creator

import (
	"net/url"
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/repository_fetcher"
	"github.com/pivotal-golang/lager"
)

type FakeFetchRequestCreator struct {
	CreateFetchRequestStub        func(logger lager.Logger, repoURL *url.URL, diskQuota int64) (*repository_fetcher.FetchRequest, error)
	createFetchRequestMutex       sync.RWMutex
	createFetchRequestArgsForCall []struct {
		logger    lager.Logger
		repoURL   *url.URL
		diskQuota int64
	}
	createFetchRequestReturns struct {
		result1 *repository_fetcher.FetchRequest
		result2 error
	}
}

func (fake *FakeFetchRequestCreator) CreateFetchRequest(logger lager.Logger, repoURL *url.URL, diskQuota int64) (*repository_fetcher.FetchRequest, error) {
	fake.createFetchRequestMutex.Lock()
	fake.createFetchRequestArgsForCall = append(fake.createFetchRequestArgsForCall, struct {
		logger    lager.Logger
		repoURL   *url.URL
		diskQuota int64
	}{logger, repoURL, diskQuota})
	fake.createFetchRequestMutex.Unlock()
	if fake.CreateFetchRequestStub != nil {
		return fake.CreateFetchRequestStub(logger, repoURL, diskQuota)
	} else {
		return fake.createFetchRequestReturns.result1, fake.createFetchRequestReturns.result2
	}
}

func (fake *FakeFetchRequestCreator) CreateFetchRequestCallCount() int {
	fake.createFetchRequestMutex.RLock()
	defer fake.createFetchRequestMutex.RUnlock()
	return len(fake.createFetchRequestArgsForCall)
}

func (fake *FakeFetchRequestCreator) CreateFetchRequestArgsForCall(i int) (lager.Logger, *url.URL, int64) {
	fake.createFetchRequestMutex.RLock()
	defer fake.createFetchRequestMutex.RUnlock()
	return fake.createFetchRequestArgsForCall[i].logger, fake.createFetchRequestArgsForCall[i].repoURL, fake.createFetchRequestArgsForCall[i].diskQuota
}

func (fake *FakeFetchRequestCreator) CreateFetchRequestReturns(result1 *repository_fetcher.FetchRequest, result2 error) {
	fake.CreateFetchRequestStub = nil
	fake.createFetchRequestReturns = struct {
		result1 *repository_fetcher.FetchRequest
		result2 error
	}{result1, result2}
}

var _ repository_fetcher.FetchRequestCreator = new(FakeFetchRequestCreator)
