// This file was generated by counterfeiter
package fake_graph

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/rootfs_provider"
	"github.com/docker/docker/image"
)

type FakeGraph struct {
	GetStub        func(id string) (*image.Image, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		id string
	}
	getReturns struct {
		result1 *image.Image
		result2 error
	}
	ByParentStub        func() (map[string][]*image.Image, error)
	byParentMutex       sync.RWMutex
	byParentArgsForCall []struct{}
	byParentReturns     struct {
		result1 map[string][]*image.Image
		result2 error
	}
}

func (fake *FakeGraph) Get(id string) (*image.Image, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		id string
	}{id})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(id)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeGraph) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeGraph) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].id
}

func (fake *FakeGraph) GetReturns(result1 *image.Image, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *image.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeGraph) ByParent() (map[string][]*image.Image, error) {
	fake.byParentMutex.Lock()
	fake.byParentArgsForCall = append(fake.byParentArgsForCall, struct{}{})
	fake.byParentMutex.Unlock()
	if fake.ByParentStub != nil {
		return fake.ByParentStub()
	} else {
		return fake.byParentReturns.result1, fake.byParentReturns.result2
	}
}

func (fake *FakeGraph) ByParentCallCount() int {
	fake.byParentMutex.RLock()
	defer fake.byParentMutex.RUnlock()
	return len(fake.byParentArgsForCall)
}

func (fake *FakeGraph) ByParentReturns(result1 map[string][]*image.Image, result2 error) {
	fake.ByParentStub = nil
	fake.byParentReturns = struct {
		result1 map[string][]*image.Image
		result2 error
	}{result1, result2}
}

var _ rootfs_provider.Graph = new(FakeGraph)
