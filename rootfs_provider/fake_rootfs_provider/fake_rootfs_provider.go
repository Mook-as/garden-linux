// This file was generated by counterfeiter
package fake_rootfs_provider

import (
	"net/url"
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/process"
	"github.com/cloudfoundry-incubator/garden-linux/rootfs_provider"
)

type FakeRootFSProvider struct {
	CreateStub        func(id string, rootfs *url.URL, namespaced bool, quota int64) (mountpoint string, envvar process.Env, err error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		id         string
		rootfs     *url.URL
		namespaced bool
		quota      int64
	}
	createReturns struct {
		result1 string
		result2 process.Env
		result3 error
	}
}

func (fake *FakeRootFSProvider) Create(id string, rootfs *url.URL, namespaced bool, quota int64) (mountpoint string, envvar process.Env, err error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		id         string
		rootfs     *url.URL
		namespaced bool
		quota      int64
	}{id, rootfs, namespaced, quota})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(id, rootfs, namespaced, quota)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2, fake.createReturns.result3
	}
}

func (fake *FakeRootFSProvider) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRootFSProvider) CreateArgsForCall(i int) (string, *url.URL, bool, int64) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].id, fake.createArgsForCall[i].rootfs, fake.createArgsForCall[i].namespaced, fake.createArgsForCall[i].quota
}

func (fake *FakeRootFSProvider) CreateReturns(result1 string, result2 process.Env, result3 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 string
		result2 process.Env
		result3 error
	}{result1, result2, result3}
}

var _ rootfs_provider.RootFSProvider = new(FakeRootFSProvider)
