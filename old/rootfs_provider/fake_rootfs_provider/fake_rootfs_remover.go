// This file was generated by counterfeiter
package fake_rootfs_provider

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/old/rootfs_provider"
	"github.com/pivotal-golang/lager"
)

type FakeRootFSRemover struct {
	CleanupRootFSStub        func(logger lager.Logger, id string) error
	cleanupRootFSMutex       sync.RWMutex
	cleanupRootFSArgsForCall []struct {
		logger lager.Logger
		id     string
	}
	cleanupRootFSReturns struct {
		result1 error
	}
}

func (fake *FakeRootFSRemover) CleanupRootFS(logger lager.Logger, id string) error {
	fake.cleanupRootFSMutex.Lock()
	fake.cleanupRootFSArgsForCall = append(fake.cleanupRootFSArgsForCall, struct {
		logger lager.Logger
		id     string
	}{logger, id})
	fake.cleanupRootFSMutex.Unlock()
	if fake.CleanupRootFSStub != nil {
		return fake.CleanupRootFSStub(logger, id)
	} else {
		return fake.cleanupRootFSReturns.result1
	}
}

func (fake *FakeRootFSRemover) CleanupRootFSCallCount() int {
	fake.cleanupRootFSMutex.RLock()
	defer fake.cleanupRootFSMutex.RUnlock()
	return len(fake.cleanupRootFSArgsForCall)
}

func (fake *FakeRootFSRemover) CleanupRootFSArgsForCall(i int) (lager.Logger, string) {
	fake.cleanupRootFSMutex.RLock()
	defer fake.cleanupRootFSMutex.RUnlock()
	return fake.cleanupRootFSArgsForCall[i].logger, fake.cleanupRootFSArgsForCall[i].id
}

func (fake *FakeRootFSRemover) CleanupRootFSReturns(result1 error) {
	fake.CleanupRootFSStub = nil
	fake.cleanupRootFSReturns = struct {
		result1 error
	}{result1}
}

var _ rootfs_provider.RootFSRemover = new(FakeRootFSRemover)
