// This file was generated by counterfeiter
package fake_linker

import (
	"sync"
	"syscall"

	"github.com/cloudfoundry-incubator/garden-linux/process_tracker"
)

type FakeLinker struct {
	SendSignalStub        func(syscall.Signal) error
	sendSignalMutex       sync.RWMutex
	sendSignalArgsForCall []struct {
		arg1 syscall.Signal
	}
	sendSignalReturns struct {
		result1 error
	}
}

func (fake *FakeLinker) SendSignal(arg1 syscall.Signal) error {
	fake.sendSignalMutex.Lock()
	fake.sendSignalArgsForCall = append(fake.sendSignalArgsForCall, struct {
		arg1 syscall.Signal
	}{arg1})
	fake.sendSignalMutex.Unlock()
	if fake.SendSignalStub != nil {
		return fake.SendSignalStub(arg1)
	} else {
		return fake.sendSignalReturns.result1
	}
}

func (fake *FakeLinker) SendSignalCallCount() int {
	fake.sendSignalMutex.RLock()
	defer fake.sendSignalMutex.RUnlock()
	return len(fake.sendSignalArgsForCall)
}

func (fake *FakeLinker) SendSignalArgsForCall(i int) syscall.Signal {
	fake.sendSignalMutex.RLock()
	defer fake.sendSignalMutex.RUnlock()
	return fake.sendSignalArgsForCall[i].arg1
}

func (fake *FakeLinker) SendSignalReturns(result1 error) {
	fake.SendSignalStub = nil
	fake.sendSignalReturns = struct {
		result1 error
	}{result1}
}

var _ process_tracker.Linker = new(FakeLinker)
