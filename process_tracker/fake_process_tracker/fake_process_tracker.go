// This file was generated by counterfeiter
package fake_process_tracker

import (
	"os/exec"
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/garden-linux/process_tracker"
)

type FakeProcessTracker struct {
	RunStub        func(processID uint32, cmd *exec.Cmd, io garden.ProcessIO, tty *garden.TTYSpec) (garden.Process, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		processID uint32
		cmd       *exec.Cmd
		io        garden.ProcessIO
		tty       *garden.TTYSpec
	}
	runReturns struct {
		result1 garden.Process
		result2 error
	}
	AttachStub        func(processID uint32, io garden.ProcessIO) (garden.Process, error)
	attachMutex       sync.RWMutex
	attachArgsForCall []struct {
		processID uint32
		io        garden.ProcessIO
	}
	attachReturns struct {
		result1 garden.Process
		result2 error
	}
	RestoreStub        func(processID uint32)
	restoreMutex       sync.RWMutex
	restoreArgsForCall []struct {
		processID uint32
	}
	ActiveProcessesStub        func() []garden.Process
	activeProcessesMutex       sync.RWMutex
	activeProcessesArgsForCall []struct{}
	activeProcessesReturns     struct {
		result1 []garden.Process
	}
}

func (fake *FakeProcessTracker) Run(processID uint32, cmd *exec.Cmd, io garden.ProcessIO, tty *garden.TTYSpec) (garden.Process, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		processID uint32
		cmd       *exec.Cmd
		io        garden.ProcessIO
		tty       *garden.TTYSpec
	}{processID, cmd, io, tty})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(processID, cmd, io, tty)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeProcessTracker) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeProcessTracker) RunArgsForCall(i int) (uint32, *exec.Cmd, garden.ProcessIO, *garden.TTYSpec) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].processID, fake.runArgsForCall[i].cmd, fake.runArgsForCall[i].io, fake.runArgsForCall[i].tty
}

func (fake *FakeProcessTracker) RunReturns(result1 garden.Process, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessTracker) Attach(processID uint32, io garden.ProcessIO) (garden.Process, error) {
	fake.attachMutex.Lock()
	fake.attachArgsForCall = append(fake.attachArgsForCall, struct {
		processID uint32
		io        garden.ProcessIO
	}{processID, io})
	fake.attachMutex.Unlock()
	if fake.AttachStub != nil {
		return fake.AttachStub(processID, io)
	} else {
		return fake.attachReturns.result1, fake.attachReturns.result2
	}
}

func (fake *FakeProcessTracker) AttachCallCount() int {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return len(fake.attachArgsForCall)
}

func (fake *FakeProcessTracker) AttachArgsForCall(i int) (uint32, garden.ProcessIO) {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return fake.attachArgsForCall[i].processID, fake.attachArgsForCall[i].io
}

func (fake *FakeProcessTracker) AttachReturns(result1 garden.Process, result2 error) {
	fake.AttachStub = nil
	fake.attachReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessTracker) Restore(processID uint32) {
	fake.restoreMutex.Lock()
	fake.restoreArgsForCall = append(fake.restoreArgsForCall, struct {
		processID uint32
	}{processID})
	fake.restoreMutex.Unlock()
	if fake.RestoreStub != nil {
		fake.RestoreStub(processID)
	}
}

func (fake *FakeProcessTracker) RestoreCallCount() int {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return len(fake.restoreArgsForCall)
}

func (fake *FakeProcessTracker) RestoreArgsForCall(i int) uint32 {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return fake.restoreArgsForCall[i].processID
}

func (fake *FakeProcessTracker) ActiveProcesses() []garden.Process {
	fake.activeProcessesMutex.Lock()
	fake.activeProcessesArgsForCall = append(fake.activeProcessesArgsForCall, struct{}{})
	fake.activeProcessesMutex.Unlock()
	if fake.ActiveProcessesStub != nil {
		return fake.ActiveProcessesStub()
	} else {
		return fake.activeProcessesReturns.result1
	}
}

func (fake *FakeProcessTracker) ActiveProcessesCallCount() int {
	fake.activeProcessesMutex.RLock()
	defer fake.activeProcessesMutex.RUnlock()
	return len(fake.activeProcessesArgsForCall)
}

func (fake *FakeProcessTracker) ActiveProcessesReturns(result1 []garden.Process) {
	fake.ActiveProcessesStub = nil
	fake.activeProcessesReturns = struct {
		result1 []garden.Process
	}{result1}
}

var _ process_tracker.ProcessTracker = new(FakeProcessTracker)
